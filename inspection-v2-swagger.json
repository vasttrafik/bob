{
  "openapi": "3.0.1",
  "info": {
    "title": "Inspection",
    "description": "Disclaimer: The information in this document is subject to change without notice. Every effort has been made in the preparation of this document to ensure accuracy of the contents, but all statements, information, and recommendations in this document do not constitute a warranty of any kind, expressively or implied.\n\n# Compliance\nOperations and/or attributes not included in this specification will not be supported. Any other deviations from the BoB specification will be textually described in corresponding operation / attribute description field in *italics*.\nParameters tagged as \"deprecated\" do mean they are not supported.\n\n# Error handling\n- An unknown operation that is received will result in error handling HTTP Response Code 501 Not Implemented\n- An unknown attribute that is received will be ignored and the operation will continue.\n- A missing Mandatory attribute will result in Error handling HTTP Response Code 400 Bad Request\n- HTTP response codes specified in the BoB API specifications are used, if not otherwise stated\n- Error codes related to authentication, see Authenticationn\n- Error codes related to authorization, see Authorization \n\n# Authentication and Authorization\n## Authentication\nThis section describes the authentication of JWTs supplied in the context of accessing an operation in Västtrafik´s BoB APIs. For the issuing of JWTs see the Västtrafik’s Authentication API specification.\n\nAll communication with the Västtrafik BoB API must use TLS (Transport Layer Security) version 1.2 or above.\n\nAuthentication involves:\n- Validating the JWT signature.\n  Public authentication keys need to be available in the Samtrafiken Participant Metadata API\n- Validating the BoB holder of key claim, bobHok. Holder of key claim is required to be present\n- Validating expiration properties of the JWT\n\nIf any of the above validation fails, the result is a HTTP Response Code 401 Unauthorized.\nFor an example JWT, see [example](https://github.com/vasttrafik/bob/blob/master/examples.md)\n\n## Authorization\nBoB specification defines a set of roles. Västtrafik´s BoB implementation makes authorization decisions based on those roles.\nIn general, the “pos” role (Point of Sale) needs to be preceded by a commercial contract with Västtrafik, and set up internally to be able to handle accounting and invoicing. Not doing so results in a failed authorization.\nThe authorization requirements are defined per operation. \nA failed authorization results in a HTTP Response Code 403 Forbidden.\n",
    "version": "2.2.0"
  },
  "servers": [
    {
      "url": "http://api-bob-prod.pks-dfp-prod.vasttrafik.se/api/v2"
    }
  ],
  "paths": {
    "/inspection/{ticketId}": {
      "post": {
        "tags": [
          "Inspection"
        ],
        "summary": "Inspect ticket by Ticket ID",
        "description": "Inspect ticket by Ticket ID and return a reference to a ticket event.\r\n\r\n**Online** inspection - If an eventResult is not provided, the result of\r\nthe inspection is not known and the server is\r\nrequested to perform inspection. In this case, the\r\n    entire MTB must be submitted via a query parameter.\r\n\r\n**Offline** inspection - If an eventResult is provided, the result of the\r\ninspection is known and the server does not have to\r\nperform inspection. In this case, the entire MTB does not need to be submitted via a query\r\nparameter.\r\n\r\n- *Only reporting of ticket events supported. Evaluation of MTB should be performed offline. Online operation where the MTB is evaluated server-side is not supported.*\r\n- *Attribute tokenTransaction ignored.*\r\n- *localEventId is Required, and required to be unique within the scope of PID and sending BoB-entity. UUID4 is recommended.*",
        "parameters": [
          {
            "name": "ticketId",
            "in": "path",
            "description": "Ticket Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mtb",
            "in": "query",
            "description": "MTB",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "X-BoB-AuthToken",
            "in": "header",
            "description": "jwt authentication token \r\n\r\n Authorization policy: *[ins]*",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Inspection event",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TicketEvent"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TicketEvent"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TicketEvent"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TicketEvent"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "headers": {
              "location": {
                "description": "URI of the new ticketEvent, see RFC 2616 section 14.30",
                "schema": {
                  "type": "string",
                  "description": "URI of the new ticketEvent, see RFC 2616 section 14.30",
                  "format": ""
                }
              }
            },
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TicketEventResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketEventResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketEventResult"
                }
              }
            }
          },
          "303": {
            "description": "Ticket data already persisted",
            "headers": {
              "location": {
                "description": "URI of the new ticketEvent, see RFC 2616 section 14.30",
                "schema": {
                  "type": "string",
                  "description": "URI of the new ticketEvent, see RFC 2616 section 14.30",
                  "format": ""
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Ticket not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/inspection": {
      "post": {
        "tags": [
          "Inspection"
        ],
        "summary": "Report already performed inspections",
        "description": "Already performed offline inspections may be submitted in batch via\r\nreportInspections.The entire batch must be accepted/rejected - there's\r\nno status reporting on individual events.Online inspection is not\r\nsupported.\r\n            \r\n- *Only reporting of ticket events supported. Evaluation of MTB should be performed offline. Online operation where the MTB is evaluated server-side is not supported.*\r\n- *Attribute tokenTransaction ignored.*",
        "parameters": [
          {
            "name": "X-BoB-AuthToken",
            "in": "header",
            "description": "jwt authentication token \r\n\r\n Authorization policy: *[ins]*",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Validation report",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TicketEvent"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TicketEvent"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TicketEvent"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TicketEvent"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AiData": {
        "required": [
          "terminalId",
          "time"
        ],
        "type": "object",
        "properties": {
          "pid": {
            "type": "integer",
            "description": "Terminal Participant Identifier",
            "format": "int32"
          },
          "terminalId": {
            "minLength": 1,
            "type": "string",
            "description": "Identifier of the terminal"
          },
          "aid": {
            "type": "string",
            "description": "Full AID (in lowercase hex) as read from the PICC"
          },
          "signatureCounter": {
            "type": "integer",
            "description": "Signature counter as read from the PICC",
            "format": "int64"
          },
          "time": {
            "type": "string",
            "description": "Current time as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)",
            "format": "date-time"
          },
          "loc": {
            "type": "string",
            "description": "Current geographical location of the terminal (WGS84 decimal tuple)"
          }
        },
        "additionalProperties": false,
        "description": "Data used to produce Authentication input for token authentication"
      },
      "DeviceReference": {
        "required": [
          "did",
          "pid"
        ],
        "type": "object",
        "properties": {
          "pid": {
            "type": "integer",
            "description": "Participant identifier",
            "format": "int64"
          },
          "did": {
            "minLength": 1,
            "type": "string",
            "description": "Device identifier"
          },
          "ua": {
            "type": "integer",
            "description": "*unsupported* User agent id.\r\nTo get user agent information, use the user agent id to match an\r\nentry in the response from the endpoint GET /device/userAgent.\r\nOr, use it in a request to the endpoint GET /device/userAgent/{ua}.\r\nBoth of these endpoints are part of the Device API implemented by\r\nthe participant identified by pid.",
            "format": "int32",
            "deprecated": true
          }
        },
        "additionalProperties": false,
        "description": "Device Reference, unique reference for device that creates device signed tickets"
      },
      "GeoPosition": {
        "required": [
          "lat",
          "long"
        ],
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "description": "A geographic coordinate that specifies the north–south position of a point on the Earth's surface",
            "format": "double"
          },
          "long": {
            "type": "number",
            "description": "A geographic coordinate that specifies the east-west position of a point on the Earth's surface",
            "format": "double"
          },
          "alt": {
            "type": "number",
            "description": "Altitude",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Geographical position (WGS84 decimal)"
      },
      "Inspector": {
        "type": "object",
        "properties": {
          "inspectorId": {
            "type": "string",
            "description": "What inspector originated the event"
          }
        },
        "additionalProperties": false
      },
      "JwkPublic": {
        "required": [
          "kid",
          "kty"
        ],
        "type": "object",
        "properties": {
          "kty": {
            "minLength": 1,
            "type": "string",
            "description": "JWA key type"
          },
          "kid": {
            "minLength": 1,
            "type": "string",
            "description": "JWK key identifier"
          },
          "crv": {
            "type": "string",
            "description": "P-256\r\nCurve type (required for kty=EC)"
          },
          "x": {
            "type": "string",
            "description": "EC x coordinate (required for kty=EC)"
          },
          "y": {
            "type": "string",
            "description": "EC y coordinate (required for kty=EC)"
          },
          "n": {
            "type": "string",
            "description": "RSA modulus parameter (required for kty=RSA)"
          },
          "e": {
            "type": "string",
            "description": "RSA exponent parameter (required for kty=RSA)"
          }
        },
        "additionalProperties": false,
        "description": "Public JSON Web Key (RFC 7517)"
      },
      "MtbReference": {
        "required": [
          "issuerSignature",
          "pid"
        ],
        "type": "object",
        "properties": {
          "pid": {
            "type": "integer",
            "description": "Participant identifier",
            "format": "int64"
          },
          "issuerSignature": {
            "minLength": 1,
            "type": "string",
            "description": "MTB Issuer Signature"
          }
        },
        "additionalProperties": false,
        "description": "MTB Reference"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "detail": {
            "type": "string"
          },
          "instance": {
            "type": "string"
          }
        },
        "additionalProperties": { }
      },
      "Service": {
        "required": [
          "pid",
          "serviceId"
        ],
        "type": "object",
        "properties": {
          "pid": {
            "type": "integer",
            "description": "Participant identifier associated with service, trip and block",
            "format": "int64"
          },
          "serviceId": {
            "minLength": 1,
            "type": "string",
            "description": "Service identifier"
          },
          "tripId": {
            "type": "string",
            "description": "Trip identifier"
          },
          "blockId": {
            "type": "string",
            "description": "Block identifier"
          }
        },
        "additionalProperties": false,
        "description": "Service information"
      },
      "StopArea": {
        "required": [
          "pid",
          "stopAreaId"
        ],
        "type": "object",
        "properties": {
          "pid": {
            "type": "integer",
            "description": "Participant identifier associated with stop area",
            "format": "int64"
          },
          "stopAreaId": {
            "minLength": 1,
            "type": "string",
            "description": "Identifier for current stop area"
          },
          "nextStopAreaId": {
            "type": "string",
            "description": "Identifier for next stop area"
          }
        },
        "additionalProperties": false,
        "description": "Stop area information"
      },
      "TicketActivationStatus": {
        "required": [
          "active"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "True if ticket is active, otherwise false"
          },
          "relativeValidity": {
            "type": "string",
            "description": "Validity period in ISO 8601 duration format (MTS8, chapter 2.4)"
          },
          "latestActivation": {
            "type": "string",
            "description": "Date and time for latest activation as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)",
            "format": "date-time"
          },
          "latestActivationExpire": {
            "type": "string",
            "description": "Date and time for expiration of latest activation as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)",
            "format": "date-time"
          },
          "numberOfActivations": {
            "type": "integer",
            "description": "Total number of times the product set can be activated",
            "format": "int64"
          },
          "remainingActivations": {
            "type": "integer",
            "description": "Remaining number of times the product set can be activated",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Activation status"
      },
      "TicketEvent": {
        "required": [
          "localEventId",
          "ticketId",
          "time"
        ],
        "type": "object",
        "properties": {
          "localEventId": {
            "minLength": 1,
            "type": "string",
            "description": "Event identifier (allocated at validation/inspection).\r\nThis property MUST be provided in order to detect retransmissions.\r\nEven though the scope of this property is (pid,entity_id), it is\r\nRECOMMENDED that it is generated as globally unique using UUIDv4."
          },
          "tokenTransaction": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TokenTransaction"
              }
            ],
            "description": "*unsupported*",
            "deprecated": true
          },
          "time": {
            "type": "string",
            "description": "Time stamp as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)",
            "format": "date-time"
          },
          "ticketId": {
            "minLength": 1,
            "type": "string",
            "description": "Unique identifier for ticket"
          },
          "eventId": {
            "type": "string",
            "description": "Event identifier (allocated at event creation)"
          },
          "eventType": {
            "enum": [
              "inspection",
              "validation"
            ],
            "type": "string",
            "description": "Type of event, inspection or validation"
          },
          "eventResult": {
            "type": "integer",
            "description": "Result code\r\n0 = success\r\n1 = other failure\r\n2 = failed spatial constraints\r\n3 = failed time constraints\r\n4 = failed device header conditions\r\n5 = failed issuer signature validation\r\n6 = failed device signature validation\r\n7 = failed blacklist check\r\n8 = failed passback check\r\n9 = failed fraud check",
            "format": "int32"
          },
          "eventReason": {
            "type": "string",
            "description": "Reason for failure/success"
          },
          "mtbReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MtbReference"
              }
            ],
            "description": "MTB reference"
          },
          "deviceReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeviceReference"
              }
            ],
            "description": "Device Reference, unique reference for device that creates device signed tickets"
          },
          "geo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GeoPosition"
              }
            ],
            "description": "Geographical position (WGS84 decimal)"
          },
          "modeOfTransport": {
            "type": "string",
            "description": "Mode of transport. Ex. bus, train or tram."
          },
          "zone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Zone"
              }
            ],
            "description": "Gets or Sets Zone"
          },
          "service": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Service"
              }
            ],
            "description": "Gets or Sets Service"
          },
          "stopArea": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StopArea"
              }
            ],
            "description": "Gets or Sets StopArea"
          },
          "validator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Validator"
              }
            ],
            "description": "Gets or Sets Validator"
          },
          "inspector": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Inspector"
              }
            ],
            "description": "*unsupported* Gets or Sets Inspector",
            "deprecated": true
          },
          "operatingDayDate": {
            "type": "string",
            "description": "Date of the operating day"
          }
        },
        "additionalProperties": false
      },
      "TicketEventResult": {
        "type": "object",
        "properties": {
          "ticketEvent": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TicketEvent"
              }
            ],
            "description": "Gets or Sets TicketEvent"
          },
          "ticketActivationStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TicketActivationStatus"
              }
            ],
            "description": "*unsupported*",
            "deprecated": true
          },
          "ticketEventPassengerMessage": {
            "type": "string",
            "description": "Message to be presented to passenger when registering an inspection or validation event."
          },
          "ticketEventInspectMessage": {
            "type": "string",
            "description": "Message to be presented to inspector when registering an inspection event"
          },
          "ticketEventStatus": {
            "type": "integer",
            "description": "Status code for inspection or validation event. This is normally the same as the exp",
            "format": "int32"
          },
          "ticketMetadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TicketMetadata"
              }
            ],
            "description": "Metadata associated with a ticket"
          }
        },
        "additionalProperties": false
      },
      "TicketMetadata": {
        "type": "object",
        "properties": {
          "relativeValidityStart": {
            "type": "string",
            "description": "Start of ticket validity period in ISO 8601 format",
            "format": "date-time"
          },
          "travellerPhotoURL": {
            "type": "string",
            "description": "URL to photo of traveller"
          },
          "ticketEventIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of all event identifiers associated with this ticket"
          }
        },
        "additionalProperties": false,
        "description": "Metadata associated with a ticket"
      },
      "TokenTransaction": {
        "required": [
          "aiRequest",
          "aiRespionse",
          "tpk"
        ],
        "type": "object",
        "properties": {
          "tpk": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JwkPublic"
              }
            ],
            "description": "Public JSON Web Key (RFC 7517)"
          },
          "aiData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AiData"
              }
            ],
            "description": "Data used to produce Authentication input for token authentication"
          },
          "aiRequest": {
            "minLength": 1,
            "type": "string",
            "description": "Authentication request as sent from PICC",
            "format": "$base64url"
          },
          "aiRespionse": {
            "minLength": 1,
            "type": "string",
            "description": "Authentication response as received from PICC",
            "format": "$base64url"
          }
        },
        "additionalProperties": false
      },
      "Validator": {
        "type": "object",
        "properties": {
          "validatorId": {
            "type": "string",
            "description": "What validator originated the event"
          },
          "location": {
            "type": "string",
            "description": "Where is the validator mounted (vehicle, platform, camel)"
          },
          "sublocation": {
            "type": "string",
            "description": "More specific location information (e.g., door"
          }
        },
        "additionalProperties": false
      },
      "Zone": {
        "required": [
          "pid",
          "zoneId"
        ],
        "type": "object",
        "properties": {
          "pid": {
            "type": "integer",
            "description": "Participant identifier associated with zone",
            "format": "int64"
          },
          "zoneId": {
            "minLength": 1,
            "type": "string",
            "description": "Zone identifier"
          }
        },
        "additionalProperties": false,
        "description": "Zone information"
      }
    }
  }
}