{
  "openapi": "3.0.1",
  "info": {
    "title": "Ticket",
    "description": "Disclaimer: The information in this document is subject to change without notice. Every effort has been made in the preparation of this document to ensure accuracy of the contents, but all statements, information, and recommendations in this document do not constitute a warranty of any kind, expressively or implied.\n\n# Compliance\nOperations and/or attributes not included in this specification will not be supported. Any other deviations from the BoB specification will be textually described in corresponding operation / attribute description field in *italics*.\nParameters tagged as \"deprecated\" do mean they are not supported.\n\n# Error handling\n- An unknown operation that is received will result in error handling HTTP Response Code 501 Not Implemented\n- An unknown attribute that is received will be ignored and the operation will continue.\n- A missing Mandatory attribute will result in Error handling HTTP Response Code 400 Bad Request\n- HTTP response codes specified in the BoB API specifications are used, if not otherwise stated\n- Error codes related to authentication, see Authenticationn\n- Error codes related to authorization, see Authorization \n\n# Authentication and Authorization\n## Authentication\nThis section describes the authentication of JWTs supplied in the context of accessing an operation in Västtrafik´s BoB APIs. For the issuing of JWTs see the Västtrafik’s Authentication API specification.\n\nAll communication with the Västtrafik BoB API must use TLS (Transport Layer Security) version 1.2 or above.\n\nAuthentication involves:\n- Validating the JWT signature.\n  Public authentication keys need to be available in the Samtrafiken Participant Metadata API\n- Validating the BoB holder of key claim, bobHok. Holder of key claim is required to be present\n- Validating expiration properties of the JWT\n\nIf any of the above validation fails, the result is a HTTP Response Code 401 Unauthorized.\nFor an example JWT, see [example](https://github.com/vasttrafik/bob/blob/master/examples.md)\n\n## Authorization\nBoB specification defines a set of roles. Västtrafik´s BoB implementation makes authorization decisions based on those roles.\nIn general, the “pos” role (Point of Sale) needs to be preceded by a commercial contract with Västtrafik, and set up internally to be able to handle accounting and invoicing. Not doing so results in a failed authorization.\nThe authorization requirements are defined per operation. \nA failed authorization results in a HTTP Response Code 403 Forbidden.\n",
    "version": "3.3.0"
  },
  "servers": [
    {
      "url": "http://api-bob-prod.pks-dfp-prod.vasttrafik.se/api/v3"
    }
  ],
  "paths": {
    "/ticket": {
      "get": {
        "tags": [
          "Ticket"
        ],
        "summary": "Get issued tickets",
        "description": "Get all issued tickets that meets the requirements specified by the parameters.\r\nWhich parameters you can filter on are described below.\r\n            \r\n*unsupported*",
        "parameters": [
          {
            "name": "travellerId",
            "in": "query",
            "description": "Filter on travellers ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pid",
            "in": "query",
            "description": "Filter on participant ID requesting the ticket",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "requestId",
            "in": "query",
            "description": "Filter on request ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Filter on active tickets",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "suspended",
            "in": "query",
            "description": "Filter on suspended tickets",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "refunded",
            "in": "query",
            "description": "Filter on refunded tickets",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "refundable",
            "in": "query",
            "description": "Filter on refundable tickets",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "hindered",
            "in": "query",
            "description": "Filter on tickets with hinderedStatus set",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "tokenId",
            "in": "query",
            "description": "Filter on token ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-BoB-AuthToken",
            "in": "header",
            "description": "jwt authentication token \r\n\r\n Authorization policy: *[pos, tvm]*",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation, return list of tickets. If filter doesn't produce any matches an empty array will be returned.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ticket"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ticket"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ticket"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised"
          }
        }
      },
      "post": {
        "tags": [
          "Ticket"
        ],
        "summary": "Issue tickets",
        "description": "Issue tickets from supplied manifest. The manifest should come from the product server for a matching participant id. Manifests from an unknown participants, expired manifest or with an illegal signature will be rejected.",
        "parameters": [
          {
            "name": "X-BoB-AuthToken",
            "in": "header",
            "description": "jwt authentication token \r\n\r\n Authorization policy: *[pos, tvm]*",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Manifest to issue tickets from",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ManifestCall"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ManifestCall"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ManifestCall"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ManifestCall"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation, return identifiers for issued tickets",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TicketIssueResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketIssueResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketIssueResponse"
                }
              }
            }
          },
          "400": {
            "description": "Manifest is invalid or from unknown participant",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "402": {
            "description": "No agreement with Västtrafik",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "501": {
            "description": "Server Error"
          }
        }
      }
    },
    "/ticket/{ticketId}": {
      "get": {
        "tags": [
          "Ticket"
        ],
        "summary": "Get ticket data and information",
        "description": "Get data and information about ticket with specified ticket identifier, issued by this server.",
        "parameters": [
          {
            "name": "ticketId",
            "in": "path",
            "description": "Ticket identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-BoB-AuthToken",
            "in": "header",
            "description": "jwt authentication token \r\n\r\n Authorization policy: *[pos, tvm]*",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Ticket"
        ],
        "summary": "Update ticket information",
        "description": "Update information about ticket with specified ticket identifier.\r\n            \r\n*unsupported*",
        "parameters": [
          {
            "name": "ticketId",
            "in": "path",
            "description": "Ticket id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-BoB-AuthToken",
            "in": "header",
            "description": "jwt authentication token \r\n\r\n Authorization policy: *[pos, tvm]*",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Ticket update",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TicketUpdateRequest"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TicketUpdateRequest"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TicketUpdateRequest"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TicketUpdateRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      }
    },
    "/ticket/{ticketId}/recoverablestatus": {
      "get": {
        "tags": [
          "Ticket"
        ],
        "summary": "Get ticket recoverable status",
        "description": "Get information if ticket specified with ticket identifier is recoverable. If ticket is refundable also supply information about recoverable amount and VAT.\r\n            \r\n* Supported on API level, but from a business perspective Västtrafik tickets are not recoverable.*",
        "parameters": [
          {
            "name": "ticketId",
            "in": "path",
            "description": "Ticket identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-BoB-AuthToken",
            "in": "header",
            "description": "jwt authentication token \r\n\r\n Authorization policy: *[pos, tvm]*",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RecoverableStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecoverableStatus"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecoverableStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      }
    },
    "/ticket/{ticketId}/refundablestatus": {
      "get": {
        "tags": [
          "Ticket"
        ],
        "summary": "Get ticket refundable status",
        "description": "Get information if ticket specified with ticket identifier is refundable. If ticket is refundable also supply information about refundable amount and VAT.\r\n            \r\n- *Point of Sale needs to be PID 14.*\r\n- *Ticket needs to be issued by the same Sales Channel as invoking the refund.*",
        "parameters": [
          {
            "name": "ticketId",
            "in": "path",
            "description": "Ticket id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-BoB-AuthToken",
            "in": "header",
            "description": "jwt authentication token \r\n\r\n Authorization policy: *[pos, tvm]*",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RefundableStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundableStatus"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundableStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      }
    },
    "/ticket/{ticketId}/active": {
      "get": {
        "tags": [
          "Ticket"
        ],
        "summary": "Get ticket active status",
        "description": "Get active status for ticket with specified ticket identifier.",
        "parameters": [
          {
            "name": "ticketId",
            "in": "path",
            "description": "Ticket id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-BoB-AuthToken",
            "in": "header",
            "description": "jwt authentication token \r\n\r\n Authorization policy: *[pos, tvm]*",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      },
      "put": {
        "tags": [
          "Ticket"
        ],
        "summary": "Activate or deactivate ticket",
        "description": "Activate or deactivate ticket with specified ticket identifier",
        "parameters": [
          {
            "name": "ticketId",
            "in": "path",
            "description": "Ticket identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-BoB-AuthToken",
            "in": "header",
            "description": "jwt authentication token \r\n\r\n Authorization policy: *[pos, tvm]*",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Set to true to activate ticket, false to deactivate.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "boolean"
              }
            },
            "application/json": {
              "schema": {
                "type": "boolean"
              }
            },
            "text/json": {
              "schema": {
                "type": "boolean"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "boolean"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation, the status of the ticket is changed"
          },
          "401": {
            "description": "Unauthorised"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      }
    },
    "/ticket/{ticketId}/recoverstatus": {
      "get": {
        "tags": [
          "Ticket"
        ],
        "summary": "Get ticket recover status",
        "description": "*Supported on API level, but from a business perspective Västtrafik tickets are not recoverable.*",
        "parameters": [
          {
            "name": "ticketId",
            "in": "path",
            "description": "Ticket identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-BoB-AuthToken",
            "in": "header",
            "description": "jwt authentication token \r\n\r\n Authorization policy: *[pos, tvm]*",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RecoverStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecoverStatus"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecoverStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      },
      "put": {
        "tags": [
          "Ticket"
        ],
        "summary": "Recover ticket",
        "description": "Recover ticket specified with ticket identifier.\r\n            \r\n*Supported on API level, but from a business perspective Västtrafik tickets are not recoverable.*",
        "parameters": [
          {
            "name": "ticketId",
            "in": "path",
            "description": "Ticket id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-BoB-AuthToken",
            "in": "header",
            "description": "jwt authentication token \r\n\r\n Authorization policy: *[pos, tvm]*",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation, ticket recovered"
          },
          "400": {
            "description": "Ticket could not be recovered"
          },
          "401": {
            "description": "Unauthorised"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      }
    },
    "/ticket/{ticketId}/hinderedstatus": {
      "get": {
        "tags": [
          "Ticket"
        ],
        "summary": "Get ticket hindered status",
        "description": "Get information if ticket specified with ticket identifier has hindered status set or not, e.g. there was a failure carrying out the services of the issued ticket.",
        "parameters": [
          {
            "name": "ticketId",
            "in": "path",
            "description": "Ticket id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-BoB-AuthToken",
            "in": "header",
            "description": "jwt authentication token \r\n\r\n Authorization policy: *[pos, tvm]*",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/HinderedStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HinderedStatus"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/HinderedStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      },
      "put": {
        "tags": [
          "Ticket"
        ],
        "summary": "Set ticket hindered",
        "description": "*unsupported* Set ticket hindered status to indicate that the traveller was unable (hindered) to use it. Detail about the cause should be set for the ticket that is marked as hindered when using this operation.",
        "parameters": [
          {
            "name": "ticketId",
            "in": "path",
            "description": "Ticket id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-BoB-AuthToken",
            "in": "header",
            "description": "jwt authentication token \r\n\r\n Authorization policy: *[pos, tvm]*",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Hindered details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "enum": [
                  "travellerHindered",
                  "operatorHindered",
                  "forceMajeure"
                ],
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "enum": [
                  "travellerHindered",
                  "operatorHindered",
                  "forceMajeure"
                ],
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "enum": [
                  "travellerHindered",
                  "operatorHindered",
                  "forceMajeure"
                ],
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "enum": [
                  "travellerHindered",
                  "operatorHindered",
                  "forceMajeure"
                ],
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Ticket hindered status could not be set"
          },
          "401": {
            "description": "Unauthorised"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      }
    },
    "/ticket/{ticketId}/refundstatus": {
      "get": {
        "tags": [
          "Ticket"
        ],
        "summary": "Get ticket refund status",
        "description": "Get information if ticket specified with ticket identifier has been refunded or not. If ticket was refunded also supply information about refunded amount and VAT.\r\n            \r\n- *Point of Sale needs to be PID 14.*\r\n- *Ticket needs to be issued by the same Sales Channel as invoking the refund.*",
        "parameters": [
          {
            "name": "ticketId",
            "in": "path",
            "description": "Ticket id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-BoB-AuthToken",
            "in": "header",
            "description": "jwt authentication token \r\n\r\n Authorization policy: *[pos, tvm]*",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RefundStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundStatus"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      },
      "put": {
        "tags": [
          "Ticket"
        ],
        "summary": "RefundAsync ticket",
        "description": "RefundAsync ticket specified with ticket identifier.\r\n            \r\n- *Point of Sale needs to be PID 14.*\r\n- *Ticket needs to be issued by the same Sales Channel as invoking the refund.*",
        "parameters": [
          {
            "name": "ticketId",
            "in": "path",
            "description": "Ticket id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-BoB-AuthToken",
            "in": "header",
            "description": "jwt authentication token \r\n\r\n Authorization policy: *[pos, tvm]*",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation, ticket was refunded"
          },
          "400": {
            "description": "Ticket could not be refunded"
          },
          "401": {
            "description": "Unauthorised"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      }
    },
    "/ticket/{ticketId}/revoke": {
      "put": {
        "tags": [
          "Ticket"
        ],
        "summary": "Revoke ticket",
        "description": "Set the ticket specified with ticket identifier in revoked state. When a ticket is in revoked state it can.\r\n            \r\n- *Point of Sale needs to be PID 14.*\r\n- *Ticket needs to be issued by the same Point of Sale as invoking the revoke.*",
        "parameters": [
          {
            "name": "ticketId",
            "in": "path",
            "description": "Ticket identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-BoB-AuthToken",
            "in": "header",
            "description": "jwt authentication token \r\n\r\n Authorization policy: *[pos, tvm]*",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation, ticket in revoved state."
          },
          "401": {
            "description": "Unauthorised"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      },
      "get": {
        "tags": [
          "Ticket"
        ],
        "summary": "Revoke status",
        "description": "Get information if ticket specified with ticket identifier has been revoked or not.If ticket was revoked the response should tell when the ticket was revoked.\r\n            \r\n- *Point of Sale needs to be PID 14.*\r\n- *Ticket needs to be issued by the same Sales Channel as invoking the refund.*",
        "parameters": [
          {
            "name": "ticketId",
            "in": "path",
            "description": "Ticket identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-BoB-AuthToken",
            "in": "header",
            "description": "jwt authentication token \r\n\r\n Authorization policy: *[pos, tvm]*",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RevokeStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevokeStatus"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevokeStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      }
    },
    "/ticket/{ticketId}/event/{eventId}": {
      "get": {
        "tags": [
          "Ticket"
        ],
        "summary": "Get ticket event",
        "description": "Get ticket event specified with event identifier and ticket identifier. Note! this is the server event identifier and not the local event identfier.",
        "parameters": [
          {
            "name": "ticketId",
            "in": "path",
            "description": "Ticket identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Event identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "X-BoB-AuthToken",
            "in": "header",
            "description": "jwt authentication token \r\n\r\n Authorization policy: *[val, ins]*",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TicketEventResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketEventResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketEventResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised"
          },
          "404": {
            "description": "Ticket and event combination not found"
          }
        }
      }
    },
    "/ticket/{ticketId}/event": {
      "get": {
        "tags": [
          "Ticket"
        ],
        "summary": "Get ticket events",
        "description": "Get all ticket events for specified ticket identifier. If no events are available an empty list will be returned.",
        "parameters": [
          {
            "name": "ticketId",
            "in": "path",
            "description": "Ticket identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-BoB-AuthToken",
            "in": "header",
            "description": "jwt authentication token \r\n\r\n Authorization policy: *[val, ins]*",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation, list of all events for specified ticket identifier.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketEventResult"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketEventResult"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketEventResult"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      }
    },
    "/ticket/{ticketId}/activationstatus": {
      "get": {
        "tags": [
          "Ticket"
        ],
        "summary": "Get ticket activation status",
        "description": "*unsupported*Get activation status for ticket with specified ticket identifier.",
        "parameters": [
          {
            "name": "ticketId",
            "in": "path",
            "description": "Ticket identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-BoB-AuthToken",
            "in": "header",
            "description": "jwt authentication token \r\n\r\n Authorization policy: *[pos, tvm]*",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ActivationStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivationStatus"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivationStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Ticket id"
          }
        }
      }
    },
    "/ticket/{ticketId}/suspendedstatus": {
      "get": {
        "tags": [
          "Ticket"
        ],
        "summary": "Get ticket suspended status",
        "description": "*unsupported*Get suspended status for ticket with specified ticket identifier.",
        "parameters": [
          {
            "name": "ticketId",
            "in": "path",
            "description": "Ticket id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-BoB-AuthToken",
            "in": "header",
            "description": "jwt authentication token \r\n\r\n Authorization policy: *[pos, tvm]*",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuspensionStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuspensionStatus"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuspensionStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      }
    },
    "/ticketbundle": {
      "post": {
        "tags": [
          "TicketBundle"
        ],
        "summary": "Create new ticket bundle",
        "description": "*unsupported* Create a new ticket bundle containing that is a subset of another ticket bundle. The tickets are specified in the request payload as a list of ticket identfiers.",
        "parameters": [
          {
            "name": "X-BoB-AuthToken",
            "in": "header",
            "description": "jwt authentication token \r\n\r\n Authorization policy: *[pos, tvm]*",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of ticket identifiers of tickets to be included in ticket bundle",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "title": "TicketBundle",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TicketBundleRequest"
                  }
                ],
                "description": "List of ticket identifiers of tickets to be included in ticket bundle"
              }
            },
            "application/json": {
              "schema": {
                "title": "TicketBundle",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TicketBundleRequest"
                  }
                ],
                "description": "List of ticket identifiers of tickets to be included in ticket bundle"
              }
            },
            "text/json": {
              "schema": {
                "title": "TicketBundle",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TicketBundleRequest"
                  }
                ],
                "description": "List of ticket identifiers of tickets to be included in ticket bundle"
              }
            },
            "application/*+json": {
              "schema": {
                "title": "TicketBundle",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TicketBundleRequest"
                  }
                ],
                "description": "List of ticket identifiers of tickets to be included in ticket bundle"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TicketBundle"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketBundle"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketBundle"
                }
              }
            }
          },
          "201": {
            "description": "Successful operation"
          },
          "400": {
            "description": "All the ticket didn't come from the same ticket bundle"
          },
          "401": {
            "description": "Unauthorised"
          }
        }
      }
    },
    "/ticketbundle/{ticketBundleId}": {
      "get": {
        "tags": [
          "TicketBundle"
        ],
        "summary": "Get ticket bundle",
        "description": "Get ticket bundle specified by the ticket bundle identifier",
        "parameters": [
          {
            "name": "ticketBundleId",
            "in": "path",
            "description": "Ticket bundle id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "X-BoB-AuthToken",
            "in": "header",
            "description": "jwt authentication token \r\n\r\n Authorization policy: *[pos, tvm]*",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TicketBundle"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketBundle"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketBundle"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised"
          },
          "404": {
            "description": "Ticket bundle not found"
          }
        }
      },
      "patch": {
        "tags": [
          "TicketBundle"
        ],
        "summary": "Update ticket bundle",
        "description": "*unsupported*Update ticket bundle specified by the ticket bundle identifier",
        "parameters": [
          {
            "name": "ticketBundleId",
            "in": "path",
            "description": "Ticket bundle id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "X-BoB-AuthToken",
            "in": "header",
            "description": "jwt authentication token \r\n\r\n Authorization policy: *[pos, tvm]*",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Ticket bundle update",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "title": "TicketBundle",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TicketBundleUpdateRequest"
                  }
                ],
                "description": "Ticket bundle update"
              }
            },
            "application/json": {
              "schema": {
                "title": "TicketBundle",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TicketBundleUpdateRequest"
                  }
                ],
                "description": "Ticket bundle update"
              }
            },
            "text/json": {
              "schema": {
                "title": "TicketBundle",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TicketBundleUpdateRequest"
                  }
                ],
                "description": "Ticket bundle update"
              }
            },
            "application/*+json": {
              "schema": {
                "title": "TicketBundle",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TicketBundleUpdateRequest"
                  }
                ],
                "description": "Ticket bundle update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TicketBundle"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketBundle"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketBundle"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Ticket bundle not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActivationStatus": {
        "required": [
          "active"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "relativeValidity": {
            "type": "string",
            "description": "*unsupported* Validity period in ISO 8601:2004 duration format (MTS8, chapter 2.4)",
            "deprecated": true
          },
          "latestActivation": {
            "type": "string",
            "description": "Date and time for latest activation, as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)",
            "format": "date-time"
          },
          "latestActivationExpire": {
            "type": "string",
            "description": "*unsupported* Date and time for expiration of latest activation, as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)",
            "format": "date-time",
            "deprecated": true
          },
          "numberOfActivations": {
            "type": "integer",
            "description": "Total number of times the product set can be activated",
            "format": "int32"
          },
          "remainingActivations": {
            "type": "integer",
            "description": "Remaining number of times the ticket can be activated",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DeviceReference": {
        "required": [
          "did",
          "pid"
        ],
        "type": "object",
        "properties": {
          "pid": {
            "type": "integer",
            "description": "Participant identifier",
            "format": "int64"
          },
          "did": {
            "minLength": 1,
            "type": "string",
            "description": "Device identifier"
          },
          "ua": {
            "type": "integer",
            "description": "*unsupported* User agent id.\r\nTo get user agent information, use the user agent id to match an\r\nentry in the response from the endpoint GET /device/userAgent.\r\nOr, use it in a request to the endpoint GET /device/userAgent/{ua}.\r\nBoth of these endpoints are part of the Device API implemented by\r\nthe participant identified by pid.",
            "format": "int32",
            "deprecated": true
          }
        },
        "additionalProperties": false,
        "description": "Device Reference, unique reference for device that creates device signed tickets"
      },
      "Fare": {
        "required": [
          "amount",
          "currency",
          "vatAmount",
          "vatPercent"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Fare cost excluding VAT",
            "format": "double"
          },
          "currency": {
            "minLength": 1,
            "type": "string",
            "description": "Currency code (ISO 4217)"
          },
          "vatAmount": {
            "type": "number",
            "description": "VAT amount",
            "format": "double"
          },
          "vatPercent": {
            "type": "number",
            "description": "VAT percent",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Fare information, amount, currency and VAT."
      },
      "GeoPosition": {
        "required": [
          "lat",
          "long"
        ],
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "description": "A geographic coordinate that specifies the north–south position of a point on the Earth's surface",
            "format": "double"
          },
          "long": {
            "type": "number",
            "description": "A geographic coordinate that specifies the east-west position of a point on the Earth's surface",
            "format": "double"
          },
          "alt": {
            "type": "number",
            "description": "Altitude",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Geographical position (WGS84 decimal)"
      },
      "HinderedStatus": {
        "type": "object",
        "properties": {
          "hindered": {
            "type": "boolean",
            "description": "Is ticket hindered"
          },
          "hinderedCause": {
            "enum": [
              "travellerHindered",
              "operatorHindered",
              "forceMajeure"
            ],
            "type": "string",
            "description": "Type of cause"
          },
          "refundableAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Fare"
              }
            ],
            "description": "Refundable fare"
          }
        },
        "additionalProperties": false,
        "description": "Tells if ticket is refundable and amount refundable"
      },
      "Inspector": {
        "type": "object",
        "properties": {
          "inspectorId": {
            "type": "string",
            "description": "What inspector originated the event"
          }
        },
        "additionalProperties": false
      },
      "JwkPublic": {
        "required": [
          "kid",
          "kty"
        ],
        "type": "object",
        "properties": {
          "kty": {
            "minLength": 1,
            "type": "string",
            "description": "JWA key type"
          },
          "kid": {
            "minLength": 1,
            "type": "string",
            "description": "JWK key identifier"
          },
          "crv": {
            "type": "string",
            "description": "P-256\r\nCurve type (required for kty=EC)"
          },
          "x": {
            "type": "string",
            "description": "EC x coordinate (required for kty=EC)"
          },
          "y": {
            "type": "string",
            "description": "EC y coordinate (required for kty=EC)"
          },
          "n": {
            "type": "string",
            "description": "RSA modulus parameter (required for kty=RSA)"
          },
          "e": {
            "type": "string",
            "description": "RSA exponent parameter (required for kty=RSA)"
          }
        },
        "additionalProperties": false,
        "description": "Public JSON Web Key (RFC 7517)"
      },
      "ManifestCall": {
        "required": [
          "manifest",
          "requestId"
        ],
        "type": "object",
        "properties": {
          "manifest": {
            "minLength": 1,
            "type": "string",
            "description": "Signed manifest with MTB template"
          },
          "requestId": {
            "minLength": 1,
            "type": "string"
          },
          "tokenId": {
            "type": "string",
            "description": "*unsupported* Token to which the ticket is bound",
            "deprecated": true
          },
          "tokenIssuer": {
            "type": "integer",
            "description": "*unsupported* Ticket holders name and identifier",
            "format": "int32",
            "deprecated": true
          },
          "tokenPublicKey": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JwkPublic"
              }
            ],
            "description": "*unsupported* Public JSON Web Key",
            "deprecated": true
          },
          "ticketHolder": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TicketHolder"
              }
            ],
            "description": "*unsupported* Traveller to register as ticket holder",
            "deprecated": true
          },
          "recoverTicketId": {
            "type": "string",
            "description": "ID of ticket in recover state to be recovered in operation"
          },
          "issueMtb": {
            "type": "boolean",
            "description": "Set to true to return MTB when tickets are issued\r\n            \r\n<i>*Required to be true*</i>"
          },
          "startOfValidity": {
            "type": "string",
            "description": "*unsupported* Request start of validity set in the future (must be within the validity time of the manifest). Time stamp in ISO 8601 format.",
            "format": "date-time",
            "deprecated": true
          },
          "bookingId": {
            "type": "string",
            "description": "*unsupported* Booking identifier from Booking API",
            "deprecated": true
          },
          "deviceId": {
            "type": "string",
            "description": "*unsupported* Identifier of the device to which the ticket will be bound. If set to null, the ticket will not be bound any device.",
            "deprecated": true
          },
          "deviceSignatureIssuer": {
            "type": "string",
            "description": "*unsupported* PID of device signature issuer",
            "deprecated": true
          },
          "signatureLifetime": {
            "type": "string",
            "description": "*unsupported* Requested maximum issuer signature lifetime (seconds)",
            "deprecated": true
          }
        },
        "additionalProperties": false
      },
      "MtbReference": {
        "required": [
          "issuerSignature",
          "pid"
        ],
        "type": "object",
        "properties": {
          "pid": {
            "type": "integer",
            "description": "Participant identifier",
            "format": "int64"
          },
          "issuerSignature": {
            "minLength": 1,
            "type": "string",
            "description": "MTB Issuer Signature"
          }
        },
        "additionalProperties": false,
        "description": "MTB Reference"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "detail": {
            "type": "string"
          },
          "instance": {
            "type": "string"
          }
        },
        "additionalProperties": { }
      },
      "RecoverStatus": {
        "type": "object",
        "properties": {
          "recovered": {
            "type": "boolean",
            "description": "True if ticket is in recovered state\r\n            \r\n<i>*Always false*</i>"
          },
          "recoveredAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Fare"
              }
            ],
            "description": "Fare recovered\r\n            \r\n<i>*As a consequence of recovered being always false, recoveredAmount is never set*</i>"
          }
        },
        "additionalProperties": false,
        "description": "Recover status"
      },
      "RecoverableStatus": {
        "type": "object",
        "properties": {
          "recoverable": {
            "type": "boolean",
            "description": "Is ticket recoverable"
          },
          "recoverableAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Fare"
              }
            ],
            "description": "Recovereable fare"
          }
        },
        "additionalProperties": false,
        "description": "Tells if ticket is recoverable and amount recoverable"
      },
      "RefundStatus": {
        "type": "object",
        "properties": {
          "refunded": {
            "type": "boolean",
            "description": "True if ticket is in refunded state"
          },
          "refundedAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Fare"
              }
            ],
            "description": "Fare refunded"
          }
        },
        "additionalProperties": false,
        "description": "Refund status"
      },
      "RefundableStatus": {
        "type": "object",
        "properties": {
          "refundable": {
            "type": "boolean",
            "description": "Is ticket refundable"
          },
          "refundableAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Fare"
              }
            ],
            "description": "Refundable fare"
          }
        },
        "additionalProperties": false,
        "description": "Tells if ticket is refundable and amount refundable"
      },
      "RevokeStatus": {
        "required": [
          "revoked"
        ],
        "type": "object",
        "properties": {
          "revoked": {
            "type": "boolean",
            "description": "True if ticket is in revoked state"
          },
          "revokedAt": {
            "type": "string",
            "description": "Time stamp as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Revoke status"
      },
      "Service": {
        "required": [
          "pid",
          "serviceId"
        ],
        "type": "object",
        "properties": {
          "pid": {
            "type": "integer",
            "description": "Participant identifier associated with service, trip and block",
            "format": "int64"
          },
          "serviceId": {
            "minLength": 1,
            "type": "string",
            "description": "Service identifier"
          },
          "tripId": {
            "type": "string",
            "description": "Trip identifier"
          },
          "blockId": {
            "type": "string",
            "description": "Block identifier"
          }
        },
        "additionalProperties": false,
        "description": "Service information"
      },
      "StopArea": {
        "required": [
          "pid",
          "stopAreaId"
        ],
        "type": "object",
        "properties": {
          "pid": {
            "type": "integer",
            "description": "Participant identifier associated with stop area",
            "format": "int64"
          },
          "stopAreaId": {
            "minLength": 1,
            "type": "string",
            "description": "Identifier for current stop area"
          },
          "nextStopAreaId": {
            "type": "string",
            "description": "Identifier for next stop area"
          }
        },
        "additionalProperties": false,
        "description": "Stop area information"
      },
      "SuspensionStatus": {
        "required": [
          "suspended"
        ],
        "type": "object",
        "properties": {
          "suspended": {
            "type": "boolean",
            "description": "True if ticket is suspended from use, otherwise false."
          },
          "suspensionExpire": {
            "type": "string",
            "description": "Date and time for expiration of the suspension status, as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Suspension status"
      },
      "Ticket": {
        "required": [
          "issuedAt",
          "ticketId",
          "ticketPayload"
        ],
        "type": "object",
        "properties": {
          "ticketId": {
            "minLength": 1,
            "type": "string"
          },
          "issuedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ticketPayload": {
            "type": "string",
            "format": "byte"
          },
          "tokenId": {
            "type": "string",
            "description": "*unsupported* Token to which the ticket is bound",
            "deprecated": true
          },
          "tokenIssuer": {
            "type": "integer",
            "description": "*unsupported* Ticket holders name and identifier",
            "format": "int32",
            "deprecated": true
          },
          "suspendedStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuspensionStatus"
              }
            ],
            "description": "*unsupported* Suspension status",
            "deprecated": true
          },
          "revokeStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RevokeStatus"
              }
            ],
            "description": "*unsupported* Revoke status",
            "deprecated": true
          },
          "activationStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActivationStatus"
              }
            ],
            "description": "*unsupported* Activation status",
            "deprecated": true
          },
          "mtb": {
            "type": "string",
            "description": "Signed MTB container",
            "format": "byte"
          },
          "ticketHolder": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TicketHolder"
              }
            ],
            "description": "*unsupported* Ticket holder",
            "deprecated": true
          },
          "activeStatus": {
            "type": "boolean",
            "description": "Ticket active status"
          },
          "recoverStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecoverStatus"
              }
            ],
            "description": "Ticket recover status"
          },
          "refundStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RefundStatus"
              }
            ],
            "description": "Ticket refund status"
          },
          "refundableStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RefundableStatus"
              }
            ],
            "description": "Ticket refundable status"
          },
          "hinderedStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HinderedStatus"
              }
            ],
            "description": "*unsupported* Hindered status",
            "deprecated": true
          }
        },
        "additionalProperties": false
      },
      "TicketActivationStatus": {
        "required": [
          "active"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "True if ticket is active, otherwise false"
          },
          "relativeValidity": {
            "type": "string",
            "description": "Validity period in ISO 8601 duration format (MTS8, chapter 2.4)"
          },
          "latestActivation": {
            "type": "string",
            "description": "Date and time for latest activation as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)",
            "format": "date-time"
          },
          "latestActivationExpire": {
            "type": "string",
            "description": "Date and time for expiration of latest activation as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)",
            "format": "date-time"
          },
          "numberOfActivations": {
            "type": "integer",
            "description": "Total number of times the product set can be activated",
            "format": "int64"
          },
          "remainingActivations": {
            "type": "integer",
            "description": "Remaining number of times the product set can be activated",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Activation status"
      },
      "TicketBundle": {
        "required": [
          "mtb",
          "settlementId",
          "ticketBundleId"
        ],
        "type": "object",
        "properties": {
          "ticketBundleId": {
            "minLength": 1,
            "type": "string"
          },
          "settlementId": {
            "minLength": 1,
            "type": "string"
          },
          "mtb": {
            "type": "string",
            "format": "byte"
          },
          "ticketIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of identifiers to tickets in bundle"
          },
          "manifestId": {
            "type": "string",
            "description": "Unique manifest identifier for issued tickets"
          }
        },
        "additionalProperties": false
      },
      "TicketBundleRequest": {
        "title": "TicketBundle",
        "type": "object",
        "properties": {
          "ticketIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List ticket identifiers"
          }
        },
        "additionalProperties": false,
        "description": "List of ticket identifiers of tickets to be included in ticket bundle"
      },
      "TicketBundleUpdateRequest": {
        "title": "TicketBundle",
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "string",
            "description": "*unsupported* Update ticket bundle specified by the ticket bundle identifier",
            "deprecated": true
          },
          "deviceSignatureIssuer": {
            "type": "integer",
            "description": "*unsupported* PID of device signature issuer",
            "format": "int32",
            "deprecated": true
          },
          "signatureLifetime": {
            "type": "integer",
            "description": "*unsupported* Requested maximum issuer signature lifetime (seconds)",
            "format": "int32",
            "deprecated": true
          },
          "tokenIssuer": {
            "type": "integer",
            "description": "*unsupported* PID of token issuer",
            "format": "int32",
            "deprecated": true
          },
          "tokenId": {
            "type": "string",
            "description": "*unsupported*",
            "deprecated": true
          },
          "tokenPublicKey": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JwkPublic"
              }
            ],
            "description": "*unsupported* Public JSON Web Key",
            "deprecated": true
          }
        },
        "additionalProperties": false,
        "description": "Ticket bundle update"
      },
      "TicketEvent": {
        "required": [
          "localEventId",
          "ticketId",
          "time"
        ],
        "type": "object",
        "properties": {
          "localEventId": {
            "minLength": 1,
            "type": "string"
          },
          "time": {
            "type": "string",
            "description": "Time stamp as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)",
            "format": "date-time"
          },
          "ticketId": {
            "minLength": 1,
            "type": "string",
            "description": "Unique identifier for ticket"
          },
          "eventId": {
            "type": "string",
            "description": "Event identifier (allocated at event creation)"
          },
          "eventType": {
            "enum": [
              "inspection",
              "validation"
            ],
            "type": "string",
            "description": "Type of event, inspection or validation"
          },
          "eventResult": {
            "type": "integer",
            "description": "Result code\r\n0 = success\r\n1 = other failure\r\n2 = failed spatial constraints\r\n3 = failed time constraints\r\n4 = failed device header conditions\r\n5 = failed issuer signature validation\r\n6 = failed device signature validation\r\n7 = failed blacklist check\r\n8 = failed passback check\r\n9 = failed fraud check",
            "format": "int32"
          },
          "eventReason": {
            "type": "string",
            "description": "Reason for failure/success"
          },
          "mtbReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MtbReference"
              }
            ],
            "description": "MTB reference"
          },
          "deviceReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeviceReference"
              }
            ],
            "description": "Device Reference, unique reference for device that creates device signed tickets"
          },
          "geo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GeoPosition"
              }
            ],
            "description": "Geographical position (WGS84 decimal)"
          },
          "modeOfTransport": {
            "type": "string",
            "description": "Mode of transport. Ex. bus, train or tram."
          },
          "zone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Zone"
              }
            ],
            "description": "Gets or Sets Zone"
          },
          "service": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Service"
              }
            ],
            "description": "Gets or Sets Service"
          },
          "stopArea": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StopArea"
              }
            ],
            "description": "Gets or Sets StopArea"
          },
          "validator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Validator"
              }
            ],
            "description": "Gets or Sets Validator"
          },
          "inspector": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Inspector"
              }
            ],
            "description": "*unsupported* Gets or Sets Inspector",
            "deprecated": true
          },
          "operatingDayDate": {
            "type": "string",
            "description": "Date of the operating day"
          }
        },
        "additionalProperties": false,
        "description": "Ticket event data from inspection or validator device"
      },
      "TicketEventResult": {
        "type": "object",
        "properties": {
          "ticketEvent": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TicketEvent"
              }
            ],
            "description": "Gets or Sets TicketEvent"
          },
          "ticketActivationStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TicketActivationStatus"
              }
            ],
            "description": "*unsupported*",
            "deprecated": true
          },
          "ticketEventPassengerMessage": {
            "type": "string",
            "description": "Message to be presented to passenger when registering an inspection or validation event."
          },
          "ticketEventInspectMessage": {
            "type": "string",
            "description": "Message to be presented to inspector when registering an inspection event"
          },
          "ticketEventStatus": {
            "type": "integer",
            "description": "Status code for inspection or validation event. This is normally the same as the exp",
            "format": "int32"
          },
          "ticketMetadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TicketMetadata"
              }
            ],
            "description": "Metadata associated with a ticket"
          }
        },
        "additionalProperties": false,
        "description": "Ticket event data from inspection or validator device"
      },
      "TicketHolder": {
        "type": "object",
        "properties": {
          "travellerId": {
            "type": "string",
            "description": "Unique traveller identifier"
          },
          "travellerName": {
            "type": "string",
            "description": "Display name of traveller"
          }
        },
        "additionalProperties": false,
        "description": "Ticket holders name and identifier"
      },
      "TicketIssueResponse": {
        "title": "TicketIssue",
        "type": "object",
        "properties": {
          "ticketBundle": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TicketBundle"
              }
            ],
            "description": "Gets or Sets TicketBundle"
          },
          "ticketIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of identifiers to issued tickets"
          },
          "settlementId": {
            "type": "string",
            "description": "Unique settlement identifier for issued tickets"
          }
        },
        "additionalProperties": false
      },
      "TicketMetadata": {
        "type": "object",
        "properties": {
          "relativeValidityStart": {
            "type": "string",
            "description": "Start of ticket validity period in ISO 8601 format",
            "format": "date-time"
          },
          "travellerPhotoURL": {
            "type": "string",
            "description": "URL to photo of traveller"
          },
          "ticketEventIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of all event identifiers associated with this ticket"
          }
        },
        "additionalProperties": false,
        "description": "Metadata associated with a ticket"
      },
      "TicketUpdateRequest": {
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "string",
            "description": "*unsupported* Identifier of the device to which the ticket will be bound. If set to null, the ticket will not be bound any device.",
            "deprecated": true
          },
          "deviceSignatureIssuer": {
            "type": "integer",
            "description": "*unsupported* PID of device signature issuer",
            "format": "int32",
            "deprecated": true
          },
          "signatureLifetime": {
            "type": "integer",
            "description": "*unsupported* Requested maximum issuer signature lifetime (seconds)",
            "format": "int32",
            "deprecated": true
          },
          "tokenIssuer": {
            "type": "integer",
            "description": "*unsupported* PID of token issuer",
            "format": "int32",
            "deprecated": true
          },
          "tokenId": {
            "type": "string",
            "description": "*unsupported*",
            "deprecated": true
          },
          "tokenPublicKey": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JwkPublic"
              }
            ],
            "description": "*unsupported* Public JSON Web Key",
            "deprecated": true
          }
        },
        "additionalProperties": false
      },
      "Validator": {
        "type": "object",
        "properties": {
          "validatorId": {
            "type": "string",
            "description": "What validator originated the event"
          },
          "location": {
            "type": "string",
            "description": "Where is the validator mounted (vehicle, platform, camel)"
          },
          "sublocation": {
            "type": "string",
            "description": "More specific location information (e.g., door"
          }
        },
        "additionalProperties": false
      },
      "Zone": {
        "required": [
          "pid",
          "zoneId"
        ],
        "type": "object",
        "properties": {
          "pid": {
            "type": "integer",
            "description": "Participant identifier associated with zone",
            "format": "int64"
          },
          "zoneId": {
            "minLength": 1,
            "type": "string",
            "description": "Zone identifier"
          }
        },
        "additionalProperties": false,
        "description": "Zone information"
      }
    }
  }
}